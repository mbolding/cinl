function trials = collewijn(filename,print_flag)
% collewijn - fourier analysis of eye trace data to estimate gain and lag of
% participant eye motion. Eye traces are broken into fast and slow
% components. The fast components are the saccades. Right now saccade tags
% generated by the eyelink are used. We plan to write our own saccade
% identification routines. 
% Data is prepared by first converting from .edf to asc using the GUI
% converter from SR Research. Then our script process_all_asc_data is run
% to preprocess and convert the asc data to .mat files. 

%% load data
warning off %#ok<WNOFF>
if ~exist('filename','var')
    [filename,pathname] = uigetfile;
    load([pathname filename])
else
    load(filename)
end

if ~exist('print_flag','var')
    print_flag = false;
end

% view trials
numTrials = size(trials,2);
for i=1:numTrials
    
    figure(i)
    numSac_L=size(trials(i).sac_L,1);
    if numSac_L > 0
        a=mean(trials(i).sac_L,1);
        meanDur_L=a(3);
        meanAmp_L=a(8);
        meanVel_L=a(9);
    else
        trials(i).sac_L = [0 0 0 0 0 0 0 0 0];
        meanDur_L=0;
        meanAmp_L=0;
        meanVel_L=0;
    end
    numSac_R=size(trials(i).sac_R,1);
    if numSac_R > 0
        a=mean(trials(i).sac_R,1);
        meanDur_R=a(3);
        meanAmp_R=a(8);
        meanVel_R=a(9);
    else
        trials(i).sac_R = [0 0 0 0 0 0 0 0 0];
        meanDur_R=0;
        meanAmp_R=0;
        meanVel_R=0;
    end
    
    %% identify saccades
    if numSac_L == 0
        trials(i).sac = trials(i).sac_R;
    else
        trials(i).sac = trials(i).sac_L;
    end
    
    
    saccade_end = detrend(trials(i).sac(:,7));
    saccade_start = detrend(trials(i).sac(:,5));
    
    %% decomp into fast and slow plot 1
    switch direction
        case 'Horizontal'
            eye_vel = [trials(i).eye(1,2) ; diff( trials(i).eye(:,2))];
            target_pos = trials(i).target(:,2);
        case 'Vertical'
            eye_vel = [trials(i).eye(1,3) ; diff( trials(i).eye(:,3))];
            target_pos = trials(i).target(:,3);
    end
    eye_vel(isnan(eye_vel))=0;
    
    sacc_on = 1 + trials(i).sac(:,1)/(1000/sample_rate); % converts time to index /2 for 500Hz /4 for 250Hz
    sacc_off = 1 + trials(i).sac(:,2)/(1000/sample_rate);
    
    % get rid of saccades before stimulus onset
    sacc_on(sacc_on<1) = 1;
    sacc_off(sacc_off<2) = 2;
    
    eye_slow = ones(size(eye_vel));
    for sacc_idx = 1:length(sacc_on)
        eye_slow(sacc_on(sacc_idx):sacc_off(sacc_idx)) = 0;
    end
    eye_fast = 1 - eye_slow;
    slow_eye_vel = eye_vel.*eye_slow;
    fast_eye_vel = eye_vel.*eye_fast;
    
    slow_eye_pos = cumsum(slow_eye_vel);
    fast_eye_pos = cumsum(fast_eye_vel);
    eye_pos = cumsum(eye_vel);
    eye_time = trials(i).eye(:,1);
    target_time = trials(i).target(:,1);
    
    %% detrend
    slow_eye_pos = detrend(slow_eye_pos);
    fast_eye_pos = fast_eye_pos - fast_eye_pos(1);
    eye_pos = detrend(eye_pos);
    target_pos = detrend(target_pos);
    
    %% plot eye positions plot 1
    subplot(2,2,[1 2])
    plot(...
        eye_time,eye_pos,...
        eye_time,slow_eye_pos,...
        eye_time,fast_eye_pos,...
        target_time,target_pos,'k:')
    legend('composite','slow','saccade','target','Location','BestOutside');
    xlim([0 40000])
    title(direction)
    
    %     %% plot eye traces plot 2
    %     subplot(2,2,2)
    %     plot(trials(i).eye(:,1),eye_pos, 'b',trials(i).sac_L(:,1),saccade_start,'g*',trials(i).sac_L(:,2),saccade_end,'r*');
    %     xlabel('Time (msec)'), ylabel('Eye position (pixels)');
    %     legend('composite','target','sacc start','sacc end');
    %     %     legend('Vert Eye Position','Vert Target Position','Start Sac','End Sac');
    % %     ylim([0 600])
    
    %% zero pad the data
    
    L     = length(eye_pos);
    Ltarg = length(target_pos);
    %     Lslow = length(slow_eye_pos);
    
    Z = zeros(L,1);
    Ztarg = zeros(Ltarg,1);
    
    eye_pos = eye_pos .* hamming(length(eye_pos));
    slow_eye_pos = slow_eye_pos .* hamming(length(slow_eye_pos));
    target_pos = target_pos .* hamming(length(target_pos));
    
    eye_pos = [Z; eye_pos; Z];
    slow_eye_pos = [Z; slow_eye_pos; Z];
    fast_eye_pos = [Z; fast_eye_pos; Z];
    target_pos = [Ztarg; target_pos; Ztarg];
    
    %     eye_pos = [ eye_pos; Z];
    %     slow_eye_pos = [ slow_eye_pos; Z];
    %     fast_eye_pos = [ fast_eye_pos; Z];
    %     target_pos = [ target_pos; Ztarg];
    %
    
    eye_time = [Z; eye_time; Z+eye_time(end)];
    target_time = [Ztarg; target_time; Ztarg+target_time(end)];
    
    %     eye_time = [eye_time; Z+eye_time(end)];
    %     target_time = [target_time; Ztarg+target_time(end)];
    
    L     = length(eye_pos);
    Ltarg = length(target_pos);
    
    subplot(2,2,[1 2])
    plot(...
        eye_time,eye_pos,...
        eye_time,slow_eye_pos,...
        eye_time,fast_eye_pos,...
        target_time,target_pos,'k:')
    legend('composite','slow','saccade','target','Location','BestOutside');
    xlim([0 40000])
    title(direction)
    
    %% fourier amplitude plot 2
    subplot(2,2,3)
    Fs = sample_rate  ; % sample rate Hz
    Fs_stim = 120 ; % monitor refresh freq Hz
    
    
    %     NFFT = L - 54 ; %
    NFFT = Ltarg * ( Fs/Fs_stim );
    NFFTtarg = Ltarg; %
    
    Y  = fft(eye_pos,NFFT)/L;
    Y2 = fft(target_pos,NFFTtarg)/Ltarg;
    Y3 = fft(slow_eye_pos,NFFT)/L;
    
    f = Fs/2*linspace(0,1,NFFT/2+1);
    f_targ = Fs_stim/2*linspace(0,1,NFFTtarg/2+1);
    
    traceRange = int32(1:NFFT/2+1);
    traceRangeTarg = int32(1:NFFTtarg/2+1);
    eye_amp = 2*abs(Y(traceRange)); % calculate amplitude at freq
    targ_amp = 2*abs(Y2(traceRangeTarg));
    slow_eye_amp = 2*abs(Y3(traceRange));
    
    %         eye_phase = rad2deg(unwrap(angle(Y(traceRange))));
    %         targ_phase = rad2deg(unwrap(angle(Y2(traceRangeTarg))));
    %         slow_eye_phase = rad2deg(unwrap(angle(Y3(traceRange))));
    %% calculate phase
    eye_phase = angle(Y(traceRange));
    targ_phase = angle(Y2(traceRangeTarg));
    slow_eye_phase = angle(Y3(traceRange));
    eye_phase = eye_phase(1:length(targ_phase)) - targ_phase;
    slow_eye_phase = slow_eye_phase(1:length(targ_phase)) - targ_phase;
    
    slow_eye_phase(slow_eye_phase>6) =  slow_eye_phase(slow_eye_phase>6)-2*pi; % get rid of wrap.
    eye_phase(eye_phase>6) =  eye_phase(eye_phase>6)-2*pi;
    
    %% interp result to get better approx of gain at specific freq
    %     upsamp = 20; % upsample multiple for interp data to stim freq
    %     f_orig = f;
    %     f = interp(f,upsamp);
    %     f_targ_orig = f_targ;
    %     f_targ = interp(f_targ,upsamp);
    %     eye_amp_orig = eye_amp;
    %     eye_amp = interp(eye_amp,upsamp);
    %     targ_amp_orig = targ_amp;
    %     targ_amp = interp(targ_amp,upsamp);
    %     slow_eye_amp_orig = slow_eye_amp;
    %     slow_eye_amp = interp(slow_eye_amp,upsamp);
    
    % numerically diff to get curvature of function
    targ_diff2 = [0;0; diff(diff(targ_amp))];
    
    % adjust to cut off analysis at low freq end of spectrum
    targ_diff2_ignore = 1;
    [targ_diff2_min,targ_diff2_min_idx] = min(targ_diff2(targ_diff2_ignore:end)); % find curvature minima
    targ_diff2_min_idx = targ_diff2_ignore + targ_diff2_min_idx; % shift index back to right place
    
    % plot the amplitude vs. frequency  plot 2
    plot(f    ,eye_amp,...
        f     ,slow_eye_amp,...
        f_targ,targ_amp,'k.');
    legend('eye','slow','target','eye phase','slow phase')
    
    %         f_orig,eye_amp_orig,'k+',...
    %         f_targ_orig,targ_amp_orig,'k+',...
    %         f_orig,slow_eye_amp_orig,'k+',...
    
    title('Single-Sided Amplitude Spectrum')
    xlabel('Frequency (Hz)')
    ylabel('|Y(f)|')
    xlim([0 2])
    
    %     ylim([0 300])
    
    %% gain plot 3
    subplot(2,2,4)
    eye_gain = eye_amp(1:length(targ_amp))./targ_amp;
    slow_eye_gain = slow_eye_amp(1:length(targ_amp))./targ_amp;
    
    % mask unneeded result
    eye_gain(targ_diff2 > -0.5) = NaN;
    slow_eye_gain(targ_diff2 > -0.5) = NaN;
    eye_phase(targ_diff2 > -0.5) = NaN;
    slow_eye_phase(targ_diff2 > -0.5) = NaN;
    
    
    %     targ_peaks(targ_peaks==0)=NaN;
    %     eye_gain(targ_peaks==0)=NaN;
    %     slow_eye_gain(targ_peaks==0)=NaN;
    
    plot(f_targ,eye_gain,'+'...
        ,f_targ,slow_eye_gain,'x'...
        ,f_targ,targ_diff2...
        ,f_targ,eye_phase,'o'...
        ,f_targ,slow_eye_phase,'o'...
        )
    %     legend('composite','slow');
    ylim([-1 2]);
    xlim([0 2])
    title('Gain')
    
    
    filename = strrep(filename,'_',' ');
    s = '';
    s = [s sprintf( ' file: %s \n background: %s \n direction: %s \n period: %s \n freq %.3f\n',...
        filename,background,direction,period,1/sscanf(period,'%f sec'))];
    s = [s sprintf( '\ncomposite eye gain: %.3f at %.3f Hz\nslow eye gain: %.3f at %.3f Hz\n',...
        eye_gain(targ_diff2_min_idx),...
        f_targ(targ_diff2_min_idx),...
        slow_eye_gain(targ_diff2_min_idx),...
        f_targ(targ_diff2_min_idx))];
    s = [s sprintf( '\ncomposite eye phase: %.3f at %.3f Hz\nslow eye phase: %.3f at %.3f Hz\n',...
        rad2deg(eye_phase(targ_diff2_min_idx)),...
        f_targ(targ_diff2_min_idx),...
        rad2deg(slow_eye_phase(targ_diff2_min_idx)),...
        f_targ(targ_diff2_min_idx))];
    
    text(0.3,1,s);
    
    
    %% print results
    if print_flag
        orient landscape
        print('-dpdf','-loose',[filename '_trial_' num2str(i) '.pdf'])
    end

        
end


